// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msgtype.proto

#ifndef PROTOBUF_msgtype_2eproto__INCLUDED
#define PROTOBUF_msgtype_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace NetProto {
class NetMsgPack;
class NetMsgPackDefaultTypeInternal;
extern NetMsgPackDefaultTypeInternal _NetMsgPack_default_instance_;
}  // namespace NetProto

namespace NetProto {

namespace protobuf_msgtype_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_msgtype_2eproto

enum Net_C2S_MsgType {
  NET_C2S_Init = 0,
  NET_C2S_Login = 1,
  NET_C2S_CreateRole = 2
};
bool Net_C2S_MsgType_IsValid(int value);
const Net_C2S_MsgType Net_C2S_MsgType_MIN = NET_C2S_Init;
const Net_C2S_MsgType Net_C2S_MsgType_MAX = NET_C2S_CreateRole;
const int Net_C2S_MsgType_ARRAYSIZE = Net_C2S_MsgType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Net_C2S_MsgType_descriptor();
inline const ::std::string& Net_C2S_MsgType_Name(Net_C2S_MsgType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Net_C2S_MsgType_descriptor(), value);
}
inline bool Net_C2S_MsgType_Parse(
    const ::std::string& name, Net_C2S_MsgType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Net_C2S_MsgType>(
    Net_C2S_MsgType_descriptor(), name, value);
}
enum Net_S2C_MsgType {
  NET_S2C_Init = 0,
  NET_S2C_CreateRole = 1
};
bool Net_S2C_MsgType_IsValid(int value);
const Net_S2C_MsgType Net_S2C_MsgType_MIN = NET_S2C_Init;
const Net_S2C_MsgType Net_S2C_MsgType_MAX = NET_S2C_CreateRole;
const int Net_S2C_MsgType_ARRAYSIZE = Net_S2C_MsgType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Net_S2C_MsgType_descriptor();
inline const ::std::string& Net_S2C_MsgType_Name(Net_S2C_MsgType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Net_S2C_MsgType_descriptor(), value);
}
inline bool Net_S2C_MsgType_Parse(
    const ::std::string& name, Net_S2C_MsgType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Net_S2C_MsgType>(
    Net_S2C_MsgType_descriptor(), name, value);
}
// ===================================================================

class NetMsgPack : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NetProto.NetMsgPack) */ {
 public:
  NetMsgPack();
  virtual ~NetMsgPack();

  NetMsgPack(const NetMsgPack& from);

  inline NetMsgPack& operator=(const NetMsgPack& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NetMsgPack(NetMsgPack&& from) noexcept
    : NetMsgPack() {
    *this = ::std::move(from);
  }

  inline NetMsgPack& operator=(NetMsgPack&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NetMsgPack& default_instance();

  static inline const NetMsgPack* internal_default_instance() {
    return reinterpret_cast<const NetMsgPack*>(
               &_NetMsgPack_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(NetMsgPack* other);
  friend void swap(NetMsgPack& a, NetMsgPack& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NetMsgPack* New() const PROTOBUF_FINAL { return New(NULL); }

  NetMsgPack* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NetMsgPack& from);
  void MergeFrom(const NetMsgPack& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NetMsgPack* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string msg = 2;
  bool has_msg() const;
  void clear_msg();
  static const int kMsgFieldNumber = 2;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_msg(::std::string&& value);
  #endif
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // optional string code = 3;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 3;
  const ::std::string& code() const;
  void set_code(const ::std::string& value);
  #if LANG_CXX11
  void set_code(::std::string&& value);
  #endif
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  ::std::string* mutable_code();
  ::std::string* release_code();
  void set_allocated_code(::std::string* code);

  // optional int32 type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:NetProto.NetMsgPack)
 private:
  void set_has_type();
  void clear_has_type();
  void set_has_msg();
  void clear_has_msg();
  void set_has_code();
  void clear_has_code();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  ::google::protobuf::internal::ArenaStringPtr code_;
  ::google::protobuf::int32 type_;
  friend struct protobuf_msgtype_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NetMsgPack

// optional int32 type = 1;
inline bool NetMsgPack::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NetMsgPack::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NetMsgPack::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NetMsgPack::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 NetMsgPack::type() const {
  // @@protoc_insertion_point(field_get:NetProto.NetMsgPack.type)
  return type_;
}
inline void NetMsgPack::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:NetProto.NetMsgPack.type)
}

// optional string msg = 2;
inline bool NetMsgPack::has_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetMsgPack::set_has_msg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetMsgPack::clear_has_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetMsgPack::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msg();
}
inline const ::std::string& NetMsgPack::msg() const {
  // @@protoc_insertion_point(field_get:NetProto.NetMsgPack.msg)
  return msg_.GetNoArena();
}
inline void NetMsgPack::set_msg(const ::std::string& value) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.NetMsgPack.msg)
}
#if LANG_CXX11
inline void NetMsgPack::set_msg(::std::string&& value) {
  set_has_msg();
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.NetMsgPack.msg)
}
#endif
inline void NetMsgPack::set_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.NetMsgPack.msg)
}
inline void NetMsgPack::set_msg(const char* value, size_t size) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.NetMsgPack.msg)
}
inline ::std::string* NetMsgPack::mutable_msg() {
  set_has_msg();
  // @@protoc_insertion_point(field_mutable:NetProto.NetMsgPack.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NetMsgPack::release_msg() {
  // @@protoc_insertion_point(field_release:NetProto.NetMsgPack.msg)
  clear_has_msg();
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NetMsgPack::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    set_has_msg();
  } else {
    clear_has_msg();
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:NetProto.NetMsgPack.msg)
}

// optional string code = 3;
inline bool NetMsgPack::has_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetMsgPack::set_has_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetMsgPack::clear_has_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetMsgPack::clear_code() {
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_code();
}
inline const ::std::string& NetMsgPack::code() const {
  // @@protoc_insertion_point(field_get:NetProto.NetMsgPack.code)
  return code_.GetNoArena();
}
inline void NetMsgPack::set_code(const ::std::string& value) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetProto.NetMsgPack.code)
}
#if LANG_CXX11
inline void NetMsgPack::set_code(::std::string&& value) {
  set_has_code();
  code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetProto.NetMsgPack.code)
}
#endif
inline void NetMsgPack::set_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetProto.NetMsgPack.code)
}
inline void NetMsgPack::set_code(const char* value, size_t size) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetProto.NetMsgPack.code)
}
inline ::std::string* NetMsgPack::mutable_code() {
  set_has_code();
  // @@protoc_insertion_point(field_mutable:NetProto.NetMsgPack.code)
  return code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NetMsgPack::release_code() {
  // @@protoc_insertion_point(field_release:NetProto.NetMsgPack.code)
  clear_has_code();
  return code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NetMsgPack::set_allocated_code(::std::string* code) {
  if (code != NULL) {
    set_has_code();
  } else {
    clear_has_code();
  }
  code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:NetProto.NetMsgPack.code)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)


}  // namespace NetProto

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::NetProto::Net_C2S_MsgType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto::Net_C2S_MsgType>() {
  return ::NetProto::Net_C2S_MsgType_descriptor();
}
template <> struct is_proto_enum< ::NetProto::Net_S2C_MsgType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto::Net_S2C_MsgType>() {
  return ::NetProto::Net_S2C_MsgType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_msgtype_2eproto__INCLUDED
